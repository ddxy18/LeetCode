//#622循环队列
class MyCircularQueue {
    private:
            vector<int> data;
            int head;
            int rear;
            int size;
public:
    /** Initialize your data structure here. Set the size of the queue to be k. */
    MyCircularQueue(int k) {
        data.resize(k);
        head=-1;
        rear=-1;
        size=k;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    bool enQueue(int value) {
        if(!isFull())
        {
            rear=(rear+1)%size;
            data[rear]=value;
            if(head==-1) head=0;
            return true;
        }
        else return false;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    bool deQueue() {
        if(!isEmpty())
        {
            if(head==rear) head=rear=-1;
            else head=(head+1)%size;
            return true;
        }
        else return false;
    }
    
    /** Get the front item from the queue. */
    int Front() {
        if(!isEmpty())
            return data[head];
        else return -1;
    }
    
    /** Get the last item from the queue. */
    int Rear() {
        if(!isEmpty())
            return data[rear];
        else return -1;
    }
    
    /** Checks whether the circular queue is empty or not. */
    bool isEmpty() {
        if(head==-1) return true;
        else return false;
    }
    
    /** Checks whether the circular queue is full or not. */
    bool isFull() {
        if((rear+1)%size==head) return true;
        else return false;
    }
};
